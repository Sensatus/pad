#!/bin/bash
#
# Configurable init.d script
#
# chkconfig: 345 20 80
# description: Runs Etherpad
# processname: etherpad

###### SCRIPT CONFIG ######
# Script to run as service:
START_SCRIPT="/home/etherpad/pad/bin/run.sh"  # Or command for testing

# User to run script under
USER="etherpad"  # Can be any user - init runs as root, best for the script not to

###### END SCRIPT CONFIG ######


NAME="$(basename $0)"
unset ISBOOT
if [ "${NAME:0:1}" = "S" -o "${NAME:0:1}" = "K" ]; then
    NAME="${NAME:3}"
    ISBOOT="1"
fi

# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser"
else
    SU="su"
fi

LOCKFILE="/var/lock/subsys/${NAME}"
RETVAL="0"

# remove when the RHEL and FC daemon functions converge
# (pulled from /etc/rc.d/init.d/functions)
function checkpid() {
    local i
    for i in $* ; do
        if [ -d "/proc/${i}" ]; then
            return 0
        fi
    done
    return 1
}

# remove when the RHEL and FC daemon functions converge
# (pulled from /etc/rc.d/init.d/functions)
function echo_failure() {
    echo -en "\\033[60G"
    echo -n "["
    echo -en "\\033[0;31m"
    echo -n $"FAILED"
    echo -en "\\033[0;39m"
    echo -n "]"
    echo -ne "\r"
    return 1
}

# remove when the RHEL and FC daemon functions converge
# (pulled from /etc/rc.d/init.d/functions)
function echo_success() {
    echo -en "\\033[60G"
    echo -n "["
    echo -en "\\033[0;32m"
    echo -n $"  OK  "
    echo -en "\\033[0;39m"
    echo -n "]"
    echo -ne "\r"
    return 0
}

# See how we were called.
function start() {
    echo -n "Starting ${NAME}: "

    if [ -e "${LOCKFILE}" ]; then
	PID=`cat ${LOCKFILE}`
	if ps -ef | awk '{ print $2 }' | grep $PID > /dev/null
	then
	    echo_failure
	    return 1
	else
	    rm -f ${LOCKFILE}
	fi
    fi

    $SU -s /bin/sh - $USER -c "$START_SCRIPT" 2>&1 > /dev/null &
    PID="$!"
    RETVAL="$?"
    if [ "$RETVAL" -eq 0 ]; then
        echo_success
	echo "$PID" > ${LOCKFILE}
    else
        echo_failure
    fi
    echo
    return $RETVAL
}

function status() {
    RETVAL="1"

    if [ -e "${LOCKFILE}" ]; then
	PID=`cat ${LOCKFILE}`
	if ps -ef | awk '{ print $2 }' | grep $PID > /dev/null
        then
	    echo "$NAME is running (${PID})"
	    RETVAL="0"
	else
	    rm -f ${LOCKFILE}
	    echo "$NAME is stopped"
	fi
    else
	echo "$NAME is stopped"
    fi

   return $RETVAL
}

function stop() {
    local STOP_VERBOSE="false"
    RETVAL="1"
    echo -n "Stopping $NAME: "

    if [ -e "${LOCKFILE}" ]; then
	PID=`cat ${LOCKFILE}`
	if ps -ef | awk '{ print $2 }' | grep $PID > /dev/null
	then
            JAVA_PID=$(ps aux | grep ^etherpad | grep java | awk '{ print $2 }')
            kill $JAVA_PID 2>&1 > /dev/null
	    sleep 5
	    RETVAL="0"
	    echo_success
	else
	    echo_failure
	fi

	rm -f ${LOCKFILE}
    else
	echo_failure
    fi

    return $RETVAL
}


# See how we were called.
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        sleep 2
        start
        ;;
    condrestart)
        if [ -f "${LOCKFILE}" ]; then
            stop
            start
        fi
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $NAME {start|stop|restart|status}"
        exit 1
esac

exit $RETVAL


